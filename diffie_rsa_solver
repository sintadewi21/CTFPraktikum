#!/usr/bin/env python3
import gmpy2
from Crypto.Util.number import long_to_bytes

# nilai publik dari soal
c = 2344291097829188983579466594189698282383664262684774986896537805572522683128055047748300247696394242490422027188454859807664457337978658793000777936459309009372856166671075431096156773955444505970263472075618053238322211277550632944972952128574619481153303321045511668987706883106816408769713058690096813388100618801583589770113565361941160389675526436558849335309158887629222188384623313561824109056628841144631219564014897602033727802336373408793274102135597864

g = 12050955267775767537568470242064572761840816042113877738976273507498444199871887767403180170097289251517250563450741923892010644458668065104572122677069707
A = 4454616487663596538806517973478271079131182042349146941797659062793031468845492590250220972656964845848862358234779851686655635425033976780511424646136324
B = 4124156168261670138441671835404469967345593457632202994459118983978680881665901731998435347814290648119083726613759685795578080384055344519189024908147976

def main():
    shared = A ^ B ^ g
    print("[*] computed shared_int")

    root, exact = gmpy2.iroot(c, 3)
    if not exact:
        print("[!] c is not a perfect cube. Exiting.")
        return

    flag2 = int(root)
    print("[*] obtained flag2 (cube root)")

    flag_int = flag2 ^ shared
    flag_bytes = long_to_bytes(flag_int)
    print("[*] flag bytes:", flag_bytes)
    try:
        print("[*] flag (utf-8):", flag_bytes.decode())
    except Exception:
        print("[*] flag (repr):", repr(flag_bytes))

if _name_ == "_main_":
    main()
